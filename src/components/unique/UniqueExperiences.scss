@use '../../styles/variables' as vars;
@use '../../styles/mixins' as *;

// Variables
$breakpoint-tablet: 768px;
$breakpoint-desktop: 1024px;
$card-min-width: 280px;
$grid-gap: 2rem;

// Keyframe Animations
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: none;
  }
}

.unique-experiences {
  width: 95%;
  margin: 1rem auto;
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  max-width: 1200px;

  @media screen and (min-width: 1440px) {
    width: 60%;
    margin: 0 auto;
  }

  // This class is added by the useAnimateOnScroll hook for the section
  &.animate {
    opacity: 1;
    transform: translateY(0);
  }

  &__title {
    font-family: vars.$font-tertiary;
    font-size: 2rem;
    font-weight: 300;
    color: vars.$color-secondary;
    text-align: center;
    margin: 2rem;
  }

  &__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: $grid-gap;

    @media (min-width: $breakpoint-tablet) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media (min-width: $breakpoint-desktop) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  &__more {
    text-align: center;
    margin-top: 3rem;
    opacity: 0;
    transform: translateY(20px);
    // This animation runs after the section is visible
    animation: fadeInUp 0.6s ease-out forwards;
    animation-delay: 0.3s;
  }

  &__more-link {
    @include button-styles-compact;

    svg {
      width: 20px;
      height: 20px;
      transition: transform 0.3s ease;
    }

    &:hover svg {
      transform: translateX(4px);
    }
  }
}

.experience-card {
  background-color: vars.$color-background;
  border-radius: 0.5rem;
  overflow: hidden;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  // Keep hover transitions separate from the scroll animation
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  
  // Initial state for the animation (matching Excursions.scss)
  opacity: 0;
  transform: translateY(20px);

  // This class is added by the useAnimateOnScroll hook for the card
  &.animate {
    // Run the animation once when the card becomes visible
    animation: fadeInUp 0.6s ease-out forwards;
  }

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  // ——— SLIDESHOW STYLES ———
  &__slideshow {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
    border-radius: 0.5rem 0.5rem 0 0;

    .slideshow__image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0;
      transition: opacity 0.8s ease-in-out;

      &.active {
        opacity: 1;
      }
    }

    .slideshow__dots {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 8px;
      z-index: 2;

      .dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        transition: background-color 0.3s ease;
        
        // Reset styles for <button>
        border: none;
        padding: 0;

        &.active,
        &:hover {
          background-color: vars.$color-accent;
        }
      }
    }
  }

  // Hover zoom for active slideshow image
  &:hover .slideshow__image.active {
    transform: scale(1.05);
  }

  // ——— SINGLE IMAGE (fallback) ———
  &__image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform 0.3s ease;

    .experience-card:hover & {
      transform: scale(1.05);
    }
  }

  &__content {
    padding: 1.5rem;
    text-align: center;
  }

  &__title {
    font-family: vars.$font-secondary;
    font-size: 1.5rem;
    font-weight: 300;
    color: vars.$color-secondary;
    margin-bottom: 1rem;
    transition: color 0.3s ease;

    .experience-card:hover & {
      color: vars.$color-accent;
    }
  }

  &__text {
    font-family: vars.$font-primary;
    font-size: calc(0.8rem + 0.5vw);
    color: vars.$color-primary;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  &__link {
    font-family: vars.$font-secondary;
    font-size: calc(0.7rem + 0.25vw);
    color: vars.$color-accent;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    transition: color 0.3s ease, transform 0.3s ease;

    &:hover {
      color: vars.$color-secondary;
      transform: translateX(5px);

      svg {
        transform: translateX(4px);
      }
    }

    svg {
      width: 20px;
      height: 20px;
      margin-left: 0.5rem;
      transition: transform 0.3s ease;
    }
  }
}

// ——— RESPONSIVE GRID ADJUSTMENTS ———
// (Unchanged)
@media (min-width: $breakpoint-tablet) and (max-width: calc(#{$breakpoint-desktop} - 1px)) {
  .unique-experiences__grid .experience-card:last-child:nth-child(odd) {
    grid-column: 1 / -1;
    justify-self: center;
    max-width: calc(50% - calc(#{$grid-gap} / 2));
  }
}

@media (min-width: $breakpoint-desktop) {
  .unique-experiences__grid {
    .experience-card:last-child:nth-child(3n-1) {
      grid-column: 2;
    }

    .experience-card:last-child:nth-child(3n-2) {
      grid-column: 2 / span 2;
      max-width: calc(66.66% - calc(#{$grid-gap} / 3));
      justify-self: center;
    }
  }
}